{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Toxx Reader Cum historia messis, omnes omniaes reperire peritus, nobilis vigiles. Ecce. Cur valebat experimentum? Secundus armarium mechanice resuscitabos fiscina est. Sunt fluctuies carpseris brevis, dexter castores. Primus solem una tractares ausus est. Requirements PHP 7.2+ ext-xmlreader Installation Using Composer Install using the composer command composer require thyyppa/toxx or by adding { \"require\" : { \"thyyppa/toxx\" : \"dev-master\" } } to your composer.json file and running composer install Setting up LoggerNet For best results the output files should be configured as described below. Most of the options are the default. Open up LoggerNet and you should see the big blue main screen. Navigate to Main->Setup and you should see the Setup Screen. LoggerNet Configuration Make sure you're not in EZ View If you are in EZ (Simplified) View you will need to click Std View on the top right of the window to proceed. On the Setup Screen, select your datalogger on the left under Entire Network , then, just to the right of that choose the table you would like to collect. After you've chosen your table click the Data Files tab. Set your output file name and be sure that Included For Scheduled Collection is checked. Choose your output file type TOA5 - Recommended Format TOA5 TOA5 is a comma separated format with a 4-line header containing metadata about the datalogger and the readings. Output File Options Include Timestamp Include Record Number Midnight is 2400 TOB1 - Recommended Format TOB1 TOB1 is a binary format with a CSV-style header. If you will only be reading this file with LoggerNet and Toxx, and have no need to read the file in plaintext, this is by far the fastest and most efficient format. Output File Options Include Timestamp Include Record Number TOACI1 TOACI1 TOACI1 is a comma separated format with a 2-line header containing metadata that defines the station name, table name, and field names. There are no output file options that need to be set. CSV CSV The CSV format only contains record data, it does not define field names. When properly configured for use with Toxx the first values will be: table id , year , day of year , 4-digit 24hr time , and record number . These fields should not be included when passing field names to the Toxx :: load () method. Important When passing field names, do not include table id, year, day, time, or the record number . They are automatically prepended. You should only pass the field names defined in your DataTable . Output File Options Year Day Hour/Minutes Seconds Midnight is 2400 Include Array ID (value doesn't matter) Array Datalogger Format - set to [ Hour/Minutes and Seconds ] ASCII - This format is sketchyzz The format defined in the LoggerNet documentation does not match what is output by LoggerNet. This section documents what is output by LoggerNet, but due to the discrepency this format is not recommended . ASCII The ASCII format only contains record data, it does not define field names. When properly configured for use with Toxx the first values will be: timestamp string and record number . These fields should not be included when passing field names to the Toxx :: load () method. Important When passing field names, do not include the timestamp or the record number . They are automatically prepended. You should only pass the field names defined in your DataTable . See Usage below for example. Output File Options Include Timestamp Include Record Number Quoted Strings Midnight is 2400 CSIXML - This format is not recommended Due to how XML is parsed in PHP, this format can be extremely slow and cause high memory usage when used with large datasets. CsiXml can be used with Toxx, but it is not recommended. CSIXML Output File Options Include Timestamp Include Record Number Midnight is 2400 Basic Usage 1 2 3 4 5 6 7 <?php use Hyyppa\\Toxx\\Toxx ; $dat = Toxx :: load ( \"filename.dat\" ); $json = $dat -> first () -> json (); $json = { \"TIMESTAMP\" : \"2020-03-08 19:35:00\" , \"RECORD\" : 0 , \"panel_temp\" : 26.86 , \"battery_voltage\" : 12.94 , \"battery_voltage_Min\" : 12.94 , \"SECONDS\" : 952544100 } 1 2 3 4 5 6 7 <?php use Hyyppa\\Toxx\\Toxx ; $dat = Toxx :: load ( \"filename.dat\" ); $json = $dat -> first () -> json (); $json = { \"timestamp\" : \"2020-03-08 19:35:00\" , \"panel_temp\" : 26.86 , \"battery_voltage\" : 12.94 , \"battery_voltage_min\" : 12.94 }","title":"Toxx Reader"},{"location":"#toxx-reader","text":"Cum historia messis, omnes omniaes reperire peritus, nobilis vigiles. Ecce. Cur valebat experimentum? Secundus armarium mechanice resuscitabos fiscina est. Sunt fluctuies carpseris brevis, dexter castores. Primus solem una tractares ausus est.","title":"Toxx Reader"},{"location":"#requirements","text":"PHP 7.2+ ext-xmlreader","title":"Requirements"},{"location":"#installation","text":"","title":"Installation"},{"location":"#using-composer","text":"Install using the composer command composer require thyyppa/toxx or by adding { \"require\" : { \"thyyppa/toxx\" : \"dev-master\" } } to your composer.json file and running composer install","title":"Using Composer"},{"location":"#setting-up-loggernet","text":"For best results the output files should be configured as described below. Most of the options are the default. Open up LoggerNet and you should see the big blue main screen. Navigate to Main->Setup and you should see the Setup Screen.","title":"Setting up LoggerNet"},{"location":"#loggernet-configuration","text":"Make sure you're not in EZ View If you are in EZ (Simplified) View you will need to click Std View on the top right of the window to proceed. On the Setup Screen, select your datalogger on the left under Entire Network , then, just to the right of that choose the table you would like to collect. After you've chosen your table click the Data Files tab. Set your output file name and be sure that Included For Scheduled Collection is checked.","title":"LoggerNet Configuration"},{"location":"#choose-your-output-file-type","text":"TOA5 - Recommended Format","title":"Choose your output file type"},{"location":"#toa5","text":"TOA5 is a comma separated format with a 4-line header containing metadata about the datalogger and the readings. Output File Options Include Timestamp Include Record Number Midnight is 2400 TOB1 - Recommended Format","title":"TOA5"},{"location":"#tob1","text":"TOB1 is a binary format with a CSV-style header. If you will only be reading this file with LoggerNet and Toxx, and have no need to read the file in plaintext, this is by far the fastest and most efficient format. Output File Options Include Timestamp Include Record Number TOACI1","title":"TOB1"},{"location":"#toaci1","text":"TOACI1 is a comma separated format with a 2-line header containing metadata that defines the station name, table name, and field names. There are no output file options that need to be set. CSV","title":"TOACI1"},{"location":"#csv","text":"The CSV format only contains record data, it does not define field names. When properly configured for use with Toxx the first values will be: table id , year , day of year , 4-digit 24hr time , and record number . These fields should not be included when passing field names to the Toxx :: load () method. Important When passing field names, do not include table id, year, day, time, or the record number . They are automatically prepended. You should only pass the field names defined in your DataTable . Output File Options Year Day Hour/Minutes Seconds Midnight is 2400 Include Array ID (value doesn't matter) Array Datalogger Format - set to [ Hour/Minutes and Seconds ] ASCII - This format is sketchyzz The format defined in the LoggerNet documentation does not match what is output by LoggerNet. This section documents what is output by LoggerNet, but due to the discrepency this format is not recommended .","title":"CSV"},{"location":"#ascii","text":"The ASCII format only contains record data, it does not define field names. When properly configured for use with Toxx the first values will be: timestamp string and record number . These fields should not be included when passing field names to the Toxx :: load () method. Important When passing field names, do not include the timestamp or the record number . They are automatically prepended. You should only pass the field names defined in your DataTable . See Usage below for example. Output File Options Include Timestamp Include Record Number Quoted Strings Midnight is 2400 CSIXML - This format is not recommended Due to how XML is parsed in PHP, this format can be extremely slow and cause high memory usage when used with large datasets. CsiXml can be used with Toxx, but it is not recommended.","title":"ASCII"},{"location":"#csixml","text":"Output File Options Include Timestamp Include Record Number Midnight is 2400","title":"CSIXML"},{"location":"#basic-usage","text":"1 2 3 4 5 6 7 <?php use Hyyppa\\Toxx\\Toxx ; $dat = Toxx :: load ( \"filename.dat\" ); $json = $dat -> first () -> json (); $json = { \"TIMESTAMP\" : \"2020-03-08 19:35:00\" , \"RECORD\" : 0 , \"panel_temp\" : 26.86 , \"battery_voltage\" : 12.94 , \"battery_voltage_Min\" : 12.94 , \"SECONDS\" : 952544100 } 1 2 3 4 5 6 7 <?php use Hyyppa\\Toxx\\Toxx ; $dat = Toxx :: load ( \"filename.dat\" ); $json = $dat -> first () -> json (); $json = { \"timestamp\" : \"2020-03-08 19:35:00\" , \"panel_temp\" : 26.86 , \"battery_voltage\" : 12.94 , \"battery_voltage_min\" : 12.94 }","title":"Basic Usage"},{"location":"readings/","text":"Readings","title":"Readings"},{"location":"readings/#readings","text":"","title":"Readings"},{"location":"records/","text":"Records","title":"Records"},{"location":"records/#records","text":"","title":"Records"},{"location":"settings/","text":"Settings","title":"Settings"},{"location":"settings/#settings","text":"","title":"Settings"},{"location":"file_formats/ascii/","text":"Ascii This format is not recommended The format defined in the LoggerNet documentation does not match what is output by LoggerNet. This page documents what is output by LoggerNet, but due to the discrepency this format is not recommended . The ASCII format only contains record data, it does not define field names. When properly configured for use with Toxx the first values will be: timestamp string and record number . These fields should not be included when passing field names to the Toxx :: load () method. Important When passing field names, do not include the timestamp or the record number . They are automatically prepended. You should only pass the field names defined in your DataTable . See Usage below for example. LoggerNet Configuration Output File Options Include Timestamp Include Record Number Quoted Strings Midnight is 2400 Example File \"2020-03-08 19:35:00\",0,26.86,12.94,12.94 \"2020-03-08 19:40:00\",0,26.86,12.94,12.94 \"2020-03-08 19:45:00\",0,26.86,12.94,12.94 \"2020-03-08 19:50:00\",1,26.86,12.94,12.94 \"2020-03-08 19:55:00\",2,26.85,12.94,12.94 Usage <?php use Hyyppa\\Toxx\\Toxx ; $dat = Toxx :: load ( 'ascii_file.dat' ,[ 'panel_temp' , 'battery_voltage' , 'battery_voltage_Min' ]); $json = $dat -> first () -> json (); $json = { \"TIMESTAMP\" : \"2020-03-08 19:35:00\" , \"RECORD\" : 0 , \"panel_temp\" : 26.86 , \"battery_voltage\" : 12.94 , \"battery_voltage_Min\" : 12.94 , \"SECONDS\" : 952544100 }","title":"Ascii"},{"location":"file_formats/ascii/#ascii","text":"This format is not recommended The format defined in the LoggerNet documentation does not match what is output by LoggerNet. This page documents what is output by LoggerNet, but due to the discrepency this format is not recommended . The ASCII format only contains record data, it does not define field names. When properly configured for use with Toxx the first values will be: timestamp string and record number . These fields should not be included when passing field names to the Toxx :: load () method. Important When passing field names, do not include the timestamp or the record number . They are automatically prepended. You should only pass the field names defined in your DataTable . See Usage below for example.","title":"Ascii"},{"location":"file_formats/ascii/#loggernet-configuration","text":"Output File Options Include Timestamp Include Record Number Quoted Strings Midnight is 2400","title":"LoggerNet Configuration"},{"location":"file_formats/ascii/#example-file","text":"\"2020-03-08 19:35:00\",0,26.86,12.94,12.94 \"2020-03-08 19:40:00\",0,26.86,12.94,12.94 \"2020-03-08 19:45:00\",0,26.86,12.94,12.94 \"2020-03-08 19:50:00\",1,26.86,12.94,12.94 \"2020-03-08 19:55:00\",2,26.85,12.94,12.94","title":"Example File"},{"location":"file_formats/ascii/#usage","text":"<?php use Hyyppa\\Toxx\\Toxx ; $dat = Toxx :: load ( 'ascii_file.dat' ,[ 'panel_temp' , 'battery_voltage' , 'battery_voltage_Min' ]); $json = $dat -> first () -> json (); $json = { \"TIMESTAMP\" : \"2020-03-08 19:35:00\" , \"RECORD\" : 0 , \"panel_temp\" : 26.86 , \"battery_voltage\" : 12.94 , \"battery_voltage_Min\" : 12.94 , \"SECONDS\" : 952544100 }","title":"Usage"},{"location":"file_formats/csixml/","text":"CsiXml This format is not recommended Due to how XML is parsed in PHP, this format can be extremely slow and cause high memory usage when used with large datasets. CsiXml can be used with Toxx, but it is not recommended. LoggerNet Configuration Output File Options Include Timestamp Include Record Number Midnight is 2400 Example File <?xml version=\"1.0\"?> <csixml version= \"1.0\" > <head> <environment> <station-name> Ridge Station </station-name> <table-name> Ridge_Table </table-name> <model> CR1000X </model> <serial-no> 12345 </serial-no> <os-version> CR1000X.Std.03.02 </os-version> <dld-name> CPU:ridge_station.CR1X </dld-name> <dld-sig> 54321 </dld-sig> </environment> <fields> <field name= \"panel_temp\" process= \"Smp\" type= \"xsd:float\" units= \"&#176;C\" /> <field name= \"battery_voltage\" process= \"Smp\" type= \"xsd:float\" units= \"volts\" /> <field name= \"battery_voltage_Min\" process= \"Min\" type= \"xsd:float\" units= \"volts\" /> </fields> </head > <data> <r no= \"0\" time= \"2020-03-08 19:45:00\" ><v1> 26.86 </v1><v2> 12.94 </v2><v3> 12.94 </v3></r> <r no= \"1\" time= \"2020-03-08 19:50:00\" ><v1> 26.86 </v1><v2> 12.94 </v2><v3> 12.94 </v3></r> <r no= \"2\" time= \"2020-03-08 19:55:00\" ><v1> 26.85 </v1><v2> 12.94 </v2><v3> 12.94 </v3></r> <r no= \"3\" time= \"2020-03-08 20:00:00\" ><v1> 26.85 </v1><v2> 12.94 </v2><v3> 12.94 </v3></r> <r no= \"4\" time= \"2020-03-08 20:05:00\" ><v1> 26.85 </v1><v2> 12.94 </v2><v3> 12.93 </v3></r> </data> </csixml> Usage <?php use Hyyppa\\Toxx\\Toxx ; $dat = Toxx :: load ( 'csixml_file.xml' ); $json = $dat -> first () -> json (); $json = { \"TIMESTAMP\" : \"2020-03-08 19:45:00\" , \"RECORD\" : 0 , \"panel_temp\" : 26.86 , \"battery_voltage\" : 12.94 , \"battery_voltage_Min\" : 12.94 , \"SECONDS\" : 952544100 }","title":"CsiXml"},{"location":"file_formats/csixml/#csixml","text":"This format is not recommended Due to how XML is parsed in PHP, this format can be extremely slow and cause high memory usage when used with large datasets. CsiXml can be used with Toxx, but it is not recommended.","title":"CsiXml"},{"location":"file_formats/csixml/#loggernet-configuration","text":"Output File Options Include Timestamp Include Record Number Midnight is 2400","title":"LoggerNet Configuration"},{"location":"file_formats/csixml/#example-file","text":"<?xml version=\"1.0\"?> <csixml version= \"1.0\" > <head> <environment> <station-name> Ridge Station </station-name> <table-name> Ridge_Table </table-name> <model> CR1000X </model> <serial-no> 12345 </serial-no> <os-version> CR1000X.Std.03.02 </os-version> <dld-name> CPU:ridge_station.CR1X </dld-name> <dld-sig> 54321 </dld-sig> </environment> <fields> <field name= \"panel_temp\" process= \"Smp\" type= \"xsd:float\" units= \"&#176;C\" /> <field name= \"battery_voltage\" process= \"Smp\" type= \"xsd:float\" units= \"volts\" /> <field name= \"battery_voltage_Min\" process= \"Min\" type= \"xsd:float\" units= \"volts\" /> </fields> </head > <data> <r no= \"0\" time= \"2020-03-08 19:45:00\" ><v1> 26.86 </v1><v2> 12.94 </v2><v3> 12.94 </v3></r> <r no= \"1\" time= \"2020-03-08 19:50:00\" ><v1> 26.86 </v1><v2> 12.94 </v2><v3> 12.94 </v3></r> <r no= \"2\" time= \"2020-03-08 19:55:00\" ><v1> 26.85 </v1><v2> 12.94 </v2><v3> 12.94 </v3></r> <r no= \"3\" time= \"2020-03-08 20:00:00\" ><v1> 26.85 </v1><v2> 12.94 </v2><v3> 12.94 </v3></r> <r no= \"4\" time= \"2020-03-08 20:05:00\" ><v1> 26.85 </v1><v2> 12.94 </v2><v3> 12.93 </v3></r> </data> </csixml>","title":"Example File"},{"location":"file_formats/csixml/#usage","text":"<?php use Hyyppa\\Toxx\\Toxx ; $dat = Toxx :: load ( 'csixml_file.xml' ); $json = $dat -> first () -> json (); $json = { \"TIMESTAMP\" : \"2020-03-08 19:45:00\" , \"RECORD\" : 0 , \"panel_temp\" : 26.86 , \"battery_voltage\" : 12.94 , \"battery_voltage_Min\" : 12.94 , \"SECONDS\" : 952544100 }","title":"Usage"},{"location":"file_formats/csv/","text":"CSV Please read carefully This is a commonly used format, but it is important that the field names are provided properly. The CSV format only contains record data, it does not define field names. When properly configured for use with Toxx the first values will be: table id , year , day of year , 4-digit 24hr time , and record number . These fields should not be included when passing field names to the Toxx :: load () method. Important When passing field names, do not include table id, year, day, time, or the record number . They are automatically prepended. You should only pass the field names defined in your DataTable . See Usage below for example. LoggerNet Configuration Output File Options Year Day Hour/Minutes Seconds Midnight is 2400 Include Array ID (value doesn't matter) Array Datalogger Format - set to [ Hour/Minutes and Seconds ] Example File 101,2020,68,1935,0,26.86,12.94,12.94 101,2020,68,1940,0,26.86,12.94,12.94 101,2020,68,1945,0,26.86,12.94,12.94 101,2020,68,1950,0,26.86,12.94,12.94 101,2020,68,1955,0,26.85,12.94,12.94 Usage <?php use Hyyppa\\Toxx\\Toxx ; $dat = Toxx :: load ( 'csv_file.dat' ,[ 'panel_temp' , 'battery_voltage' , 'battery_voltage_Min' ]); $json = $dat -> first () -> json (); $json = { \"TIMESTAMP\" : \"2020-03-08 19:35:00\" , \"RECORD\" : 0 , \"panel_temp\" : 26.86 , \"battery_voltage\" : 12.94 , \"battery_voltage_Min\" : 12.94 , \"SECONDS\" : 952544100 }","title":"CSV"},{"location":"file_formats/csv/#csv","text":"Please read carefully This is a commonly used format, but it is important that the field names are provided properly. The CSV format only contains record data, it does not define field names. When properly configured for use with Toxx the first values will be: table id , year , day of year , 4-digit 24hr time , and record number . These fields should not be included when passing field names to the Toxx :: load () method. Important When passing field names, do not include table id, year, day, time, or the record number . They are automatically prepended. You should only pass the field names defined in your DataTable . See Usage below for example.","title":"CSV"},{"location":"file_formats/csv/#loggernet-configuration","text":"Output File Options Year Day Hour/Minutes Seconds Midnight is 2400 Include Array ID (value doesn't matter) Array Datalogger Format - set to [ Hour/Minutes and Seconds ]","title":"LoggerNet Configuration"},{"location":"file_formats/csv/#example-file","text":"101,2020,68,1935,0,26.86,12.94,12.94 101,2020,68,1940,0,26.86,12.94,12.94 101,2020,68,1945,0,26.86,12.94,12.94 101,2020,68,1950,0,26.86,12.94,12.94 101,2020,68,1955,0,26.85,12.94,12.94","title":"Example File"},{"location":"file_formats/csv/#usage","text":"<?php use Hyyppa\\Toxx\\Toxx ; $dat = Toxx :: load ( 'csv_file.dat' ,[ 'panel_temp' , 'battery_voltage' , 'battery_voltage_Min' ]); $json = $dat -> first () -> json (); $json = { \"TIMESTAMP\" : \"2020-03-08 19:35:00\" , \"RECORD\" : 0 , \"panel_temp\" : 26.86 , \"battery_voltage\" : 12.94 , \"battery_voltage_Min\" : 12.94 , \"SECONDS\" : 952544100 }","title":"Usage"},{"location":"file_formats/fsl/","text":"todo Add support for Final Storage Label files","title":"FSL"},{"location":"file_formats/tdf/","text":"TDF This page is for reference only Table Definition Files are created by LoggerNet and not modified by Toxx in any way. Table Definition Files are created whenever you compile a program using CRBASIC Editor. Toxx can use these files to better understand your headerless data formats, adding meta data to your records so that you can use CSV and ASCII with as much information as you would have when using TOA5 and TOB1. Structure This information was gathered by observation and may be incorrect. The TDF file is a simple binary that begins with a single byte 0x01 , which is presumably the version number, followed by a null terminated list of table structures. { byte version, // usually 0x01 TABLE tables[] // null terminated } Table { string field_name, // null terminated uint32 size, // table size FIELD_TYPE time_type, // data type used for timestamps (usually 0x0E for 8-byte NSEC) NSEC start_time, // time that collection began, usually 0 (1990-01-01) NSEC interval, // table collection interval FIELD fields[], // list of fields (4-byte zero terminated?) byte null // null } Field { FIELD_TYPE type, // the first bit indicates read-only, the next 7 indicate field type string name, // null terminated string alias, // null terminated string processing, // null terminated string unit, // null terminated string description, // null terminated uint32 start_index, // dimension start index, usually 1 (?) uint32 size, // total length of all dimensions, typically 1 for simple readings uint32 dimension[] // zero terminated - if size is 1 this is just a single uint32 of 0 } Field Type These are best-guesses, and many are unused See LoggerNet SDK Programmer's Manual 4.5 - Section 16.7.1 for more info. enum byte { UNKNOWN , UINT1 , // 0x01 -- 1 - byte unsigned int ( BE ) UINT2 , // 0x02 -- 2 - byte unsigned int ( BE ) UINT4 , // 0x03 -- 4 - byte unsigned int ( BE ) INT1 , // 0x04 -- 1 - byte signed int ( BE ) INT2 , // 0x05 -- 2 - byte signed int ( BE ) INT4 , // 0x06 -- 4 - byte signed int ( BE ) FP2 , // 0x07 -- 2 - byte final storage float ( aka FS2 ) FP4 , // 0x08 -- 4 - byte final storage float ( aka FS4 ) IEEE4 , // 0x09 -- 4 - byte IEEE floating point ( BE ) BOOL , // 0x0A -- 1 - byte boolean ASCII , // 0x0B -- n - byte fixed length string SEC , // 0x0C -- 4 - byte unsigned int storing seconds since 1990 - 01 - 01 USEC , // 0x0D -- 6 - byte unsigned int storing 10 s of microseconds since 1990 - 01 - 01 NSEC , // 0x0E -- 8 - byte , 4 - bytes for sec since 1990 + 4 - bytes for additional nanoseconds ( BE ) FP3 , // 0x0F -- 3 - byte final storage float ( aka FS3 ) ASCIIZ , // 0x10 -- n + 1 - byte null terminated variable length string BOOL8 , // 0x11 -- 1 - byte bit field IEEE8 , // 0x12 -- 8 - byte IEEE floating point ( BE ) INT2_LSF , // 0x13 -- 2 - byte signed int ( LE ) INT4_LSF , // 0x14 -- 4 - byte singed int ( LE ) INT2_LSF2 , // 0x15 -- 2 - byte singed int ( LE ) ( duplicate ? ) UINT4_LSF , // 0x16 -- 4 - byte unsinged int ( LE ) NSEC_LSF , // 0x17 -- 8 - byte , same as NSEC but little endian ( LE ) IEEE4_LSF , // 0x18 -- 4 - byte IEEE floating point ( LE ) IEEE8_LSF , // 0x19 -- 8 - byte IEEE floating point ( LE ) FS4 , // 0x1A -- 4 - byte floating point ( aka FS4 ) BOOL2 , // 0x1B -- 2 - byte boolean , though one source says 4 - byte storage for either FP2 or FP3 BOOL4 , // 0x1C -- 4 - byte boolean , though one source says 8 - byte of nanoseconds since 1990 ( LE ) LGRDATE , // 0x1D -- 8 - byte of nanoseconds since 1990 ( BE ) BOOL2_LSF , // 0x1E -- 2 - byte boolean , non - zero = true BOOL4_LSF , // 0x1F -- 4 - byte boolean , non - zero = true INT8 , // 0x20 -- 8 - byte signed int ( BE ) INT8_LSF // 0x21 -- 8 - byte signed int ( LE ) } References LoggerNet SDK Programmer's Manual 4.5 Loggernet Product Manual 4.6 https://github.com/kitplummer/PyPak https://github.com/sutanay/PbCdlComm","title":"TDF"},{"location":"file_formats/tdf/#tdf","text":"This page is for reference only Table Definition Files are created by LoggerNet and not modified by Toxx in any way. Table Definition Files are created whenever you compile a program using CRBASIC Editor. Toxx can use these files to better understand your headerless data formats, adding meta data to your records so that you can use CSV and ASCII with as much information as you would have when using TOA5 and TOB1.","title":"TDF"},{"location":"file_formats/tdf/#structure","text":"This information was gathered by observation and may be incorrect. The TDF file is a simple binary that begins with a single byte 0x01 , which is presumably the version number, followed by a null terminated list of table structures. { byte version, // usually 0x01 TABLE tables[] // null terminated }","title":"Structure"},{"location":"file_formats/tdf/#table","text":"{ string field_name, // null terminated uint32 size, // table size FIELD_TYPE time_type, // data type used for timestamps (usually 0x0E for 8-byte NSEC) NSEC start_time, // time that collection began, usually 0 (1990-01-01) NSEC interval, // table collection interval FIELD fields[], // list of fields (4-byte zero terminated?) byte null // null }","title":"Table"},{"location":"file_formats/tdf/#field","text":"{ FIELD_TYPE type, // the first bit indicates read-only, the next 7 indicate field type string name, // null terminated string alias, // null terminated string processing, // null terminated string unit, // null terminated string description, // null terminated uint32 start_index, // dimension start index, usually 1 (?) uint32 size, // total length of all dimensions, typically 1 for simple readings uint32 dimension[] // zero terminated - if size is 1 this is just a single uint32 of 0 }","title":"Field"},{"location":"file_formats/tdf/#field-type","text":"These are best-guesses, and many are unused See LoggerNet SDK Programmer's Manual 4.5 - Section 16.7.1 for more info. enum byte { UNKNOWN , UINT1 , // 0x01 -- 1 - byte unsigned int ( BE ) UINT2 , // 0x02 -- 2 - byte unsigned int ( BE ) UINT4 , // 0x03 -- 4 - byte unsigned int ( BE ) INT1 , // 0x04 -- 1 - byte signed int ( BE ) INT2 , // 0x05 -- 2 - byte signed int ( BE ) INT4 , // 0x06 -- 4 - byte signed int ( BE ) FP2 , // 0x07 -- 2 - byte final storage float ( aka FS2 ) FP4 , // 0x08 -- 4 - byte final storage float ( aka FS4 ) IEEE4 , // 0x09 -- 4 - byte IEEE floating point ( BE ) BOOL , // 0x0A -- 1 - byte boolean ASCII , // 0x0B -- n - byte fixed length string SEC , // 0x0C -- 4 - byte unsigned int storing seconds since 1990 - 01 - 01 USEC , // 0x0D -- 6 - byte unsigned int storing 10 s of microseconds since 1990 - 01 - 01 NSEC , // 0x0E -- 8 - byte , 4 - bytes for sec since 1990 + 4 - bytes for additional nanoseconds ( BE ) FP3 , // 0x0F -- 3 - byte final storage float ( aka FS3 ) ASCIIZ , // 0x10 -- n + 1 - byte null terminated variable length string BOOL8 , // 0x11 -- 1 - byte bit field IEEE8 , // 0x12 -- 8 - byte IEEE floating point ( BE ) INT2_LSF , // 0x13 -- 2 - byte signed int ( LE ) INT4_LSF , // 0x14 -- 4 - byte singed int ( LE ) INT2_LSF2 , // 0x15 -- 2 - byte singed int ( LE ) ( duplicate ? ) UINT4_LSF , // 0x16 -- 4 - byte unsinged int ( LE ) NSEC_LSF , // 0x17 -- 8 - byte , same as NSEC but little endian ( LE ) IEEE4_LSF , // 0x18 -- 4 - byte IEEE floating point ( LE ) IEEE8_LSF , // 0x19 -- 8 - byte IEEE floating point ( LE ) FS4 , // 0x1A -- 4 - byte floating point ( aka FS4 ) BOOL2 , // 0x1B -- 2 - byte boolean , though one source says 4 - byte storage for either FP2 or FP3 BOOL4 , // 0x1C -- 4 - byte boolean , though one source says 8 - byte of nanoseconds since 1990 ( LE ) LGRDATE , // 0x1D -- 8 - byte of nanoseconds since 1990 ( BE ) BOOL2_LSF , // 0x1E -- 2 - byte boolean , non - zero = true BOOL4_LSF , // 0x1F -- 4 - byte boolean , non - zero = true INT8 , // 0x20 -- 8 - byte signed int ( BE ) INT8_LSF // 0x21 -- 8 - byte signed int ( LE ) }","title":"Field Type"},{"location":"file_formats/tdf/#references","text":"LoggerNet SDK Programmer's Manual 4.5 Loggernet Product Manual 4.6 https://github.com/kitplummer/PyPak https://github.com/sutanay/PbCdlComm","title":"References"},{"location":"file_formats/toa5/","text":"TOA5 Recommended Format TOA5 is a comma separated format 1 with a 4-line header containing metadata about the datalogger and the readings. LoggerNet Configuration Output File Options Include Timestamp Include Record Number Midnight is 2400 Structure TOA5 Format \"TOA5\" Station Name Datalogger Model Serial Number OS Version DLD Name DLD Sig Table Name Field Names Units Processing Method 2 Record Record ... Example File \"TOA5\",\"Ridge Station\",\"CR1000X\",\"12345\",\"CR1000X.Std.03.02\",\"CPU:ridge_station.CR1X\",\"12345\",\"Ridge_Table\" \"TIMESTAMP\",\"RECORD\",\"panel_temp\",\"battery_voltage\",\"battery_voltage_Min\" \"TS\",\"RN\",\"\u00b0C\",\"volts\",\"volts\" \"\",\"\",\"Smp\",\"Smp\",\"Min\" \"2020-03-08 19:35:00\",0,26.86,12.94,12.94 \"2020-03-08 19:40:00\",0,26.86,12.94,12.94 \"2020-03-08 19:45:00\",0,26.86,12.94,12.94 ... Usage <?php use Hyyppa\\Toxx\\Toxx ; $dat = Toxx :: load ( 'toa5_file.dat' ); $json = $dat -> first () -> json (); $json = { \"TIMESTAMP\" : \"2020-03-08 19:35:00\" , \"RECORD\" : 0 , \"panel_temp\" : 26.86 , \"battery_voltage\" : 12.94 , \"battery_voltage_Min\" : 12.94 , \"SECONDS\" : 952544100 } Though comma separated, the file is not valid rfc4180 compliant csv as the first line of header does not contain the same number of columns as the rest of the csv file. \u21a9 See available processing methods here: LoggerNet Product Manual - B.1.3.1 Field Name Suffixes \u21a9","title":"TOA5"},{"location":"file_formats/toa5/#toa5","text":"Recommended Format TOA5 is a comma separated format 1 with a 4-line header containing metadata about the datalogger and the readings.","title":"TOA5"},{"location":"file_formats/toa5/#loggernet-configuration","text":"Output File Options Include Timestamp Include Record Number Midnight is 2400","title":"LoggerNet Configuration"},{"location":"file_formats/toa5/#structure","text":"TOA5 Format \"TOA5\" Station Name Datalogger Model Serial Number OS Version DLD Name DLD Sig Table Name Field Names Units Processing Method 2 Record Record ...","title":"Structure"},{"location":"file_formats/toa5/#example-file","text":"\"TOA5\",\"Ridge Station\",\"CR1000X\",\"12345\",\"CR1000X.Std.03.02\",\"CPU:ridge_station.CR1X\",\"12345\",\"Ridge_Table\" \"TIMESTAMP\",\"RECORD\",\"panel_temp\",\"battery_voltage\",\"battery_voltage_Min\" \"TS\",\"RN\",\"\u00b0C\",\"volts\",\"volts\" \"\",\"\",\"Smp\",\"Smp\",\"Min\" \"2020-03-08 19:35:00\",0,26.86,12.94,12.94 \"2020-03-08 19:40:00\",0,26.86,12.94,12.94 \"2020-03-08 19:45:00\",0,26.86,12.94,12.94 ...","title":"Example File"},{"location":"file_formats/toa5/#usage","text":"<?php use Hyyppa\\Toxx\\Toxx ; $dat = Toxx :: load ( 'toa5_file.dat' ); $json = $dat -> first () -> json (); $json = { \"TIMESTAMP\" : \"2020-03-08 19:35:00\" , \"RECORD\" : 0 , \"panel_temp\" : 26.86 , \"battery_voltage\" : 12.94 , \"battery_voltage_Min\" : 12.94 , \"SECONDS\" : 952544100 } Though comma separated, the file is not valid rfc4180 compliant csv as the first line of header does not contain the same number of columns as the rest of the csv file. \u21a9 See available processing methods here: LoggerNet Product Manual - B.1.3.1 Field Name Suffixes \u21a9","title":"Usage"},{"location":"file_formats/toaci1/","text":"TOACI1 TOACI1 is a comma separated format 1 with a 2-line header containing metadata that defines the station name, table name, and field names. LoggerNet Configuration Structure TOACI1 Format \"TOACI1\" Station Name Table Name Field Names Record Record ... Example File \"TOACI1\",\"Ridge Station\",\"Ridge_Table\" \"TMSTAMP\",\"RECNBR\",\"panel_temp\",\"battery_voltage\",\"battery_voltage_Min\" \"2020-03-08 19:35:00\",0,26.86,12.94,12.94 \"2020-03-08 19:40:00\",0,26.86,12.94,12.94 Usage <?php use Hyyppa\\Toxx\\Toxx ; $dat = Toxx :: load ( 'toaci1_file.dat' ); $json = $dat -> first () -> json (); $json = { \"TIMESTAMP\" : \"2020-03-08 19:35:00\" , \"RECORD\" : 0 , \"panel_temp\" : 26.86 , \"battery_voltage\" : 12.94 , \"battery_voltage_Min\" : 12.94 , \"SECONDS\" : 952544100 } Though comma separated, the file is not valid rfc4180 compliant csv as the first line of header does not contain the same number of columns as the rest of the csv file. \u21a9","title":"TOACI1"},{"location":"file_formats/toaci1/#toaci1","text":"TOACI1 is a comma separated format 1 with a 2-line header containing metadata that defines the station name, table name, and field names.","title":"TOACI1"},{"location":"file_formats/toaci1/#loggernet-configuration","text":"","title":"LoggerNet Configuration"},{"location":"file_formats/toaci1/#structure","text":"TOACI1 Format \"TOACI1\" Station Name Table Name Field Names Record Record ...","title":"Structure"},{"location":"file_formats/toaci1/#example-file","text":"\"TOACI1\",\"Ridge Station\",\"Ridge_Table\" \"TMSTAMP\",\"RECNBR\",\"panel_temp\",\"battery_voltage\",\"battery_voltage_Min\" \"2020-03-08 19:35:00\",0,26.86,12.94,12.94 \"2020-03-08 19:40:00\",0,26.86,12.94,12.94","title":"Example File"},{"location":"file_formats/toaci1/#usage","text":"<?php use Hyyppa\\Toxx\\Toxx ; $dat = Toxx :: load ( 'toaci1_file.dat' ); $json = $dat -> first () -> json (); $json = { \"TIMESTAMP\" : \"2020-03-08 19:35:00\" , \"RECORD\" : 0 , \"panel_temp\" : 26.86 , \"battery_voltage\" : 12.94 , \"battery_voltage_Min\" : 12.94 , \"SECONDS\" : 952544100 } Though comma separated, the file is not valid rfc4180 compliant csv as the first line of header does not contain the same number of columns as the rest of the csv file. \u21a9","title":"Usage"},{"location":"file_formats/tob1/","text":"TOB1 Recommended Format TOB1 is a binary format with a CSV-style header. 1 If you will only be reading this file with LoggerNet and Toxx, and have no need to read the file in plaintext, this is by far the fastest and most efficient format. LoggerNet Configuration Output File Options Include Timestamp Include Record Number Structure TOB1 Format \"TOB1\" Station Name Datalogger Model Serial Number OS Version DLD Name DLD Sig Table Name Field Names Units Processing Method 2 Field Type 3 [Binary Record Data] Binary Field Formats Name Size Description UINT1 1-byte unsigned int UINT2 2-byte unsigned int UINT4 4-byte unsigned int INT1 1-byte signed int INT2 2-byte signed int INT4 4-byte signed int INT8 8-byte signed int FP2 2-byte non-standard floating point FP4 4-byte non-standard floating point IEEE4 4-byte IEEE floating point IEEE8 8-byte IEEE floating point ASCII(n) n-byte fixed length null-terminated string SEC 4-byte unsigned int as seconds since 1990-01-01 USEC 6-byte unsigned int as 10s of microseconds since 1990-01-01 NSEC 8-byte 4-bytes for sec since 1990 + 4-bytes nanoseconds BOOL 1-byte boolean BOOL2 2-byte boolean BOOL4 4-byte boolean BOOL8 1-byte bit field FP2 FP2 is widely used as a storage format in Campbell Scientific dataloggers, it is a non-standard two-byte floating point number with a single sign bit, a two-bit negative decimal exponent, and a 13-bit mantissa. Decoding FP2 sign = ( 0x8000 & FP2 ) >> 15 exponent = ( 0x6000 & FP2 ) >> 13 mantissa = ( 0x1FFF & FP2 ) value = mantissa * pow ( 10 , -exponent ) * ( sign == 0 ? 1 : -1 ) FP4 Untested FP4 is a storage format used in Campbell Scientific dataloggers. It is a non-standard four-byte floating point number with a single sign bit, a seven-bit base-two exponent, and a 24-bit mantissa. Decoding FP4 sign = ( 0x80000000 & FP4 ) >> 31 ; exponent = ( 0x7F000000 & FP4 ) >> 24 ; mantissa = ( 0x00FFFFFF & FP4 ) ; value = mantissa * pow ( 2 , exponent ) * ( sign == 0 ? 1 : -1 ) ; Example File \"TOB1\",\"Ridge Station\",\"CR1000X\",\"12345\",\"CR1000X.Std.03.02\",\"CPU:ridge_station.CR1X\",\"12345\",\"Ridge_Table\" \"SECONDS\",\"NANOSECONDS\",\"RECORD\",\"panel_temp\",\"battery_voltage\",\"battery_voltage_Min\" \"SECONDS\",\"NANOSECONDS\",\"RN\",\"\u00b0C\",\"volts\",\"volts\" \"\",\"\",\"\",\"Smp\",\"Smp\",\"Min\" \"ULONG\",\"ULONG\",\"ULONG\",\"FP2\",\"FP2\",\"FP2\" [binary record data...] Usage <?php use Hyyppa\\Toxx\\Toxx ; $dat = Toxx :: load ( 'toa5_file.dat' ); $json = $dat -> first () -> json (); $json = { \"TIMESTAMP\" : \"2020-03-08 19:35:00\" , \"RECORD\" : 0 , \"panel_temp\" : 26.86 , \"battery_voltage\" : 12.94 , \"battery_voltage_Min\" : 12.94 , \"SECONDS\" : 952544100 } References LoggerNet Product Manual 4.6 - Appendix B.1.4 Though comma separated, the file is not valid rfc4180 compliant csv as the first line of header does not contain the same number of columns as the rest of the csv file. \u21a9 See available processing methods here: LoggerNet Product Manual - B.1.3.1 Field Name Suffixes \u21a9 See Binary Field Formats Table \u21a9","title":"TOB1"},{"location":"file_formats/tob1/#tob1","text":"Recommended Format TOB1 is a binary format with a CSV-style header. 1 If you will only be reading this file with LoggerNet and Toxx, and have no need to read the file in plaintext, this is by far the fastest and most efficient format.","title":"TOB1"},{"location":"file_formats/tob1/#loggernet-configuration","text":"Output File Options Include Timestamp Include Record Number","title":"LoggerNet Configuration"},{"location":"file_formats/tob1/#structure","text":"TOB1 Format \"TOB1\" Station Name Datalogger Model Serial Number OS Version DLD Name DLD Sig Table Name Field Names Units Processing Method 2 Field Type 3 [Binary Record Data]","title":"Structure"},{"location":"file_formats/tob1/#binary-field-formats","text":"Name Size Description UINT1 1-byte unsigned int UINT2 2-byte unsigned int UINT4 4-byte unsigned int INT1 1-byte signed int INT2 2-byte signed int INT4 4-byte signed int INT8 8-byte signed int FP2 2-byte non-standard floating point FP4 4-byte non-standard floating point IEEE4 4-byte IEEE floating point IEEE8 8-byte IEEE floating point ASCII(n) n-byte fixed length null-terminated string SEC 4-byte unsigned int as seconds since 1990-01-01 USEC 6-byte unsigned int as 10s of microseconds since 1990-01-01 NSEC 8-byte 4-bytes for sec since 1990 + 4-bytes nanoseconds BOOL 1-byte boolean BOOL2 2-byte boolean BOOL4 4-byte boolean BOOL8 1-byte bit field","title":"Binary Field Formats"},{"location":"file_formats/tob1/#fp2","text":"FP2 is widely used as a storage format in Campbell Scientific dataloggers, it is a non-standard two-byte floating point number with a single sign bit, a two-bit negative decimal exponent, and a 13-bit mantissa.","title":"FP2"},{"location":"file_formats/tob1/#decoding-fp2","text":"sign = ( 0x8000 & FP2 ) >> 15 exponent = ( 0x6000 & FP2 ) >> 13 mantissa = ( 0x1FFF & FP2 ) value = mantissa * pow ( 10 , -exponent ) * ( sign == 0 ? 1 : -1 )","title":"Decoding FP2"},{"location":"file_formats/tob1/#fp4","text":"Untested FP4 is a storage format used in Campbell Scientific dataloggers. It is a non-standard four-byte floating point number with a single sign bit, a seven-bit base-two exponent, and a 24-bit mantissa.","title":"FP4"},{"location":"file_formats/tob1/#decoding-fp4","text":"sign = ( 0x80000000 & FP4 ) >> 31 ; exponent = ( 0x7F000000 & FP4 ) >> 24 ; mantissa = ( 0x00FFFFFF & FP4 ) ; value = mantissa * pow ( 2 , exponent ) * ( sign == 0 ? 1 : -1 ) ;","title":"Decoding FP4"},{"location":"file_formats/tob1/#example-file","text":"\"TOB1\",\"Ridge Station\",\"CR1000X\",\"12345\",\"CR1000X.Std.03.02\",\"CPU:ridge_station.CR1X\",\"12345\",\"Ridge_Table\" \"SECONDS\",\"NANOSECONDS\",\"RECORD\",\"panel_temp\",\"battery_voltage\",\"battery_voltage_Min\" \"SECONDS\",\"NANOSECONDS\",\"RN\",\"\u00b0C\",\"volts\",\"volts\" \"\",\"\",\"\",\"Smp\",\"Smp\",\"Min\" \"ULONG\",\"ULONG\",\"ULONG\",\"FP2\",\"FP2\",\"FP2\" [binary record data...]","title":"Example File"},{"location":"file_formats/tob1/#usage","text":"<?php use Hyyppa\\Toxx\\Toxx ; $dat = Toxx :: load ( 'toa5_file.dat' ); $json = $dat -> first () -> json (); $json = { \"TIMESTAMP\" : \"2020-03-08 19:35:00\" , \"RECORD\" : 0 , \"panel_temp\" : 26.86 , \"battery_voltage\" : 12.94 , \"battery_voltage_Min\" : 12.94 , \"SECONDS\" : 952544100 }","title":"Usage"},{"location":"file_formats/tob1/#references","text":"LoggerNet Product Manual 4.6 - Appendix B.1.4 Though comma separated, the file is not valid rfc4180 compliant csv as the first line of header does not contain the same number of columns as the rest of the csv file. \u21a9 See available processing methods here: LoggerNet Product Manual - B.1.3.1 Field Name Suffixes \u21a9 See Binary Field Formats Table \u21a9","title":"References"},{"location":"snippets/processing/","text":"See available processing methods here: LoggerNet Product Manual - B.1.3.1 Field Name Suffixes \u21a9","title":"Processing"},{"location":"snippets/rfc4180/","text":"Though comma separated, the file is not valid rfc4180 compliant csv as the first line of header does not contain the same number of columns as the rest of the csv file. \u21a9","title":"Rfc4180"},{"location":"snippets/config/ascii/","text":"Output File Options Include Timestamp Include Record Number Quoted Strings Midnight is 2400","title":"Ascii"},{"location":"snippets/config/csixml/","text":"Output File Options Include Timestamp Include Record Number Midnight is 2400","title":"Csixml"},{"location":"snippets/config/csv/","text":"Output File Options Year Day Hour/Minutes Seconds Midnight is 2400 Include Array ID (value doesn't matter) Array Datalogger Format - set to [ Hour/Minutes and Seconds ]","title":"Csv"},{"location":"snippets/config/toa5/","text":"Output File Options Include Timestamp Include Record Number Midnight is 2400","title":"Toa5"},{"location":"snippets/config/toaci1/","text":"","title":"Toaci1"},{"location":"snippets/config/tob1/","text":"Output File Options Include Timestamp Include Record Number","title":"Tob1"}]}